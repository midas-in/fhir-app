"use strict";(self.webpackChunkfhircore=self.webpackChunkfhircore||[]).push([[9470],{400:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var r=n(5893),i=n(1151);const s={},a="Data migration",d={id:"engineering/android-app/configuring/data-migration",title:"Data migration",description:"The main functionalities of data migration are:",source:"@site/docs/engineering/android-app/configuring/data-migration.mdx",sourceDirName:"engineering/android-app/configuring",slug:"/engineering/android-app/configuring/data-migration",permalink:"/engineering/android-app/configuring/data-migration",draft:!1,unlisted:!1,editUrl:"https://github.com/opensrp/fhircore/tree/main/docs/engineering/android-app/configuring/data-migration.mdx",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Widgets",permalink:"/engineering/android-app/configuring/config-types/widget"},next:{title:"Editing",permalink:"/engineering/android-app/configuring/editing"}},l={},c=[{value:"Sample JSON for Task migration",id:"sample-json-for-task-migration",level:2},{value:"Config properties",id:"config-properties",level:2}];function o(e){const t={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"data-migration",children:"Data migration"}),"\n",(0,r.jsx)(t.p,{children:"The main functionalities of data migration are:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Migrating data by updating resources based on a set of data queries and key-value pairs,"}),"\n",(0,r.jsx)(t.li,{children:"Retrieving the latest migration version from shared preferences,"}),"\n",(0,r.jsxs)(t.li,{children:["Performing the migration only if the new version is greater than the client's latest stored migration version.\nThe data migration configuration outlines a set of rules and operations for migrating malformed FHIR resources such as ",(0,r.jsx)(t.code,{children:"Task"})," resource migration on the client app sqlite database. With this configuration one is able to filter the target resource eg ",(0,r.jsx)(t.code,{children:"Encounter"})," or ",(0,r.jsx)(t.code,{children:"Task"})," and read its referenced ",(0,r.jsx)(t.code,{children:"PlanDefinition"})," and its careplans then filter for the task or resource being migrated that lies within the careplan period and read the resulting ",(0,r.jsx)(t.code,{children:"careplan id"})," . The migration then uses the resulting id to replace the malformed attribute such as ",(0,r.jsx)(t.code,{children:"Task.basedOn"})," hence cleaning out the malformed resource attributes that a wrong ",(0,r.jsx)(t.code,{children:"StructureMap"})," may have generated. The feature allows one to filter using data queries and write rules that can query using ",(0,r.jsx)(t.code,{children:"forward_include"})," as well as ",(0,r.jsx)(t.code,{children:"rev_include"})," targeting base resources and any related resources"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"sample-json-for-task-migration",children:"Sample JSON for Task migration"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\n  "appId": "echis",\n  "configType": "dataMigration",\n  "migrations": [\n    {\n      "resourceType": "Task",\n      "updateValues": [\n        {\n          "jsonPathExpression": "Task.basedOn[0].reference",\n          "valueRule": {\n            "name": "taskBasedOn",\n            "condition": "true",\n            "actions": [\n              "data.put(\'taskBasedOn\', \'CarePlan/\' + fhirPath.extractValue(Task, \'Task.basedOn[0].reference\') )"\n            ]\n          }\n        }\n      ],\n      "dataQueries": [\n        {\n          "paramName": "status",\n          "operation": "OR",\n          "filterCriteria": [\n            {\n              "dataType": "CODE",\n              "value": {\n                "system": "http://hl7.org/fhir/task-status",\n                "code": "ready"\n              }\n            },\n            {\n              "dataType": "CODE",\n              "value": {\n                "system": "http://hl7.org/fhir/task-status",\n                "code": "requested"\n              }\n            },\n            {\n              "dataType": "CODE",\n              "value": {\n                "system": "http://hl7.org/fhir/task-status",\n                "code": "in-progress"\n              }\n            }\n          ]\n        }\n      ],\n      "purgeAffectedResources": true,\n      "createLocalChangeEntitiesAfterPurge": true,\n      "resourceFilterExpression" : {\n        "conditionalFhirPathExpressions": [\n          "Task.basedOn[0].reference.startsWith(\'CarePlan\').not() and Task.basedOn[0].reference.startsWith(\'PlanDefinition\').not()"\n        ],\n        "matchAll": true\n      },\n      "version": 1\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"config-properties",children:"Config properties"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Property"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"Required"}),(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"Default"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"appId"}),(0,r.jsx)(t.td,{children:"Provides the ID of the application"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"configType"}),(0,r.jsx)(t.td,{children:"Type of configuration"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"dataMigration"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"migrations"}),(0,r.jsx)(t.td,{children:"List of migrations"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"resourceType"}),(0,r.jsx)(t.td,{children:"The resource to to get/fetch data from e.g Task or Careplan"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"yes"}),(0,r.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"updateValues"}),(0,r.jsx)(t.td,{children:"Provides the ID of the application"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"configType"}),(0,r.jsx)(t.td,{children:"Type of configuration"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"dataMigration"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"rules"}),(0,r.jsx)(t.td,{children:"List of rule configurations"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"version"}),(0,r.jsx)(t.td,{children:"Version of the migration configuration"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"purgeAffectedResources"}),(0,r.jsx)(t.td,{children:"Flag indicating whether affected resources should be purged"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"false"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"createLocalChangeEntitiesAfterPurge"}),(0,r.jsx)(t.td,{children:"Flag indicating whether to create local change entities after purging"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"true"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"resourceFilterExpression"}),(0,r.jsx)(t.td,{children:"Expression for filtering resources during migration"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"jsonPathExpression"}),(0,r.jsx)(t.td,{children:"JSON path expression for locating the value within the resource"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"computedValueKey"}),(0,r.jsx)(t.td,{children:"Key for the computed value to be updated"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"center"}})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>d,a:()=>a});var r=n(7294);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);